package itsaMAZEing;

import java.util.ArrayList;
import java.util.Random;

public class Maze {
	public static MazeSpace[][] maze;
	
	public static void main(String[] args){
		maze = generateMaze(Vector2.newVector(100,100), Vector2.newVector(1, 1), Vector2.newVector(11, 11));
		drawMaze(maze);
	}
	
	private static MazeSpace[][] generateMaze(Vector2 size, Vector2 start, Vector2 jump){
		return generateMaze(blankMaze(size),start,jump, 0);
	}
	private static MazeSpace[][] generateMaze(MazeSpace[][] m, Vector2 place, Vector2 jump, int depth){
		Random rand = new Random();
		ArrayList<LegalMoves> mvs = new ArrayList<LegalMoves>();
		ArrayList<Vector2> log = new ArrayList<Vector2>();
		log.add(place);
		
		do{
			//drawMaze(m,place);
			place = log.get(log.size()-1);
			mvs.removeAll(mvs);
			mvs = legalMoves(m,place,jump);
			
			//if(mvs.size() <= 0) break;
			while(mvs.size() <= 0){
				log.remove(log.size()-1);
				if(log.size() <= 0){
					return generateMazeExits(m,jump);
				}else{
					place = log.get(log.size()-1);
				}
				mvs.removeAll(mvs);
				mvs = legalMoves(m,place,jump);
			}
			
			LegalMoves mv = mvs.get(rand.nextInt(mvs.size()));
			
			switch(mv){
				case up:
					m = flipSpaceBits(m,place,Vector2.newVector(0, jump.y));
					log.add(Vector2.newVector(place.x, place.y+jump.y));
					//m = generateMaze(m,Vector2.newVector(place.x, place.y+jump.y),jump,depth++);
					break;
				case down:
					m = flipSpaceBits(m,place,Vector2.newVector(0, -jump.y));
					log.add(Vector2.newVector(place.x, place.y-jump.y));
					//m = generateMaze(m,Vector2.newVector(place.x, place.y-jump.y),jump,depth++);
					break;
				case right:
					m = flipSpaceBits(m,place,Vector2.newVector(jump.x, 0));
					log.add(Vector2.newVector(place.x+jump.x, place.y));
					//m = generateMaze(m,Vector2.newVector(place.x+jump.y, place.y),jump,depth++);
					break;
				case left:
					m = flipSpaceBits(m,place,Vector2.newVector(-jump.x, 0));
					log.add(Vector2.newVector(place.x-jump.x, place.y));
					//m = generateMaze(m,Vector2.newVector(place.x-jump.y, place.y),jump,depth++);
					break;
			}
		}while(true);
	}
	private static MazeSpace[][] flipSpaceBits(MazeSpace[][] m, Vector2 placeOld, Vector2 moveDir){
		if(moveDir.x != 0){
			for(int j = placeOld.x; j != placeOld.x + moveDir.x + ((0 > moveDir.x) ? -1 : +1); j = ((0 > moveDir.x) ? j-1 : j+1)){
				m[placeOld.y][j] = MazeSpace.space;
			}
		}else{
			for(int i = placeOld.y; i != placeOld.y + moveDir.y + ((0 > moveDir.y) ? -1 : +1); i = ((0 > moveDir.y) ? i-1 : i+1)){
				m[i][placeOld.x] = MazeSpace.space;
			}
		}
		return m;
	}
	private static MazeSpace[][] blankMaze(Vector2 size){
		MazeSpace[][] mz = new MazeSpace[size.y][size.x];
		for(int i = 0; i < size.y; i++){
			for(int j = 0; j < size.x; j++){
				mz[i][j] = MazeSpace.wall;
			}
		}
		return mz;
	}
	private static MazeSpace[][] generateMazeExits(MazeSpace[][] m, Vector2 jump){
		ArrayList<Vector2> possibleDoors = new ArrayList<Vector2>(), doorDirs = new ArrayList<Vector2>();
		for(int i = 0; i < m.length; i += m.length-1){
			for(int j = 0; j < m[i].length; j++){
				if(m[i + ((i==0)?jump.y:-jump.y)][j] == MazeSpace.space){
					possibleDoors.add(Vector2.newVector(i, j));
					doorDirs.add(Vector2.newVector(((i==0)?jump.y:-jump.y),j));
				}
			}
		}
		for(int i = 0; i < m[0].length; i += m[0].length-1){
			for(int j = 0; j < m.length; j++){
				if(m[j][i + ((i==0)?jump.x:-jump.x)] == MazeSpace.space){
					possibleDoors.add(Vector2.newVector(j, i));
					doorDirs.add(Vector2.newVector(j,((i==0)?jump.x:-jump.x)));
				}
			}
		}
		
		Random rand = new Random();
		
		int a = rand.nextInt(possibleDoors.size());
		m = flipSpaceBits(m,possibleDoors.get(a),doorDirs.get(a));

		possibleDoors.remove(a);
		doorDirs.remove(a);
		
		a = rand.nextInt(possibleDoors.size());
		m = flipSpaceBits(m,possibleDoors.get(a),doorDirs.get(a));
		
		return m;
	}
	
	private static ArrayList<LegalMoves> legalMoves(MazeSpace[][] m, Vector2 place, Vector2 jump){
		ArrayList<LegalMoves> mvs = new ArrayList<LegalMoves>();
		
		//check up
		int u = place.y + jump.y;
		if(u < m.length && m[u][place.x] == MazeSpace.wall){
			mvs.add(LegalMoves.up);
		}
		//check down
		int d = place.y - jump.y;
		if(d >= 0 && m[d][place.x] == MazeSpace.wall){
			mvs.add(LegalMoves.down);
		}
		//check left
		int l = place.x - jump.x;
		if(l >= 0 && m[place.y][l] == MazeSpace.wall){
			mvs.add(LegalMoves.left);
		}
		//check right
		int r = place.x + jump.x;
		if(r < m[0].length && m[place.y][r] == MazeSpace.wall){
			mvs.add(LegalMoves.right);
		}
		
		return mvs;
	}
	
	private static void drawMaze(MazeSpace[][] m){
		for(int i = 0; i < m.length; i++){
			for(int j = 0; j < m[i].length; j++){
				if(m[i][j] == MazeSpace.space){
					System.out.print("  ");
				}else{
					System.out.print("++");
				}
			}
			System.out.println("");
		}
	}
	private static void drawMaze(MazeSpace[][] m, Vector2 vec){
		for(int i = 0; i < m.length; i++){
			for(int j = 0; j < m[i].length; j++){
				if(i == vec.y && j == vec.x){
					System.out.print("&&");
				}else{
					if(m[i][j] == MazeSpace.space){
						System.out.print("  ");
					}else{
						System.out.print("++");
					}
				}
			}
			System.out.println("");
		}
	}
	
	private static class Vector2{
		public int x,y;
		
		public String ToString(){
			return "<" + x + "," + y + ">";
		}
		
		public static Vector2 newVector(int xValue, int yValue){
			Vector2 vec = new Vector2();
			vec.x = xValue;
			vec.y = yValue;
			return vec;
		}
	}
}
