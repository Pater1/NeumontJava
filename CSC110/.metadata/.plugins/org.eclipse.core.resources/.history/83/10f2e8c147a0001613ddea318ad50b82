package edu.neumont.csc110.a.drills;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.Random;

public class DrillsPart3 {
	
	//Use in for user input
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	//Use out instead of System.out for output
	public static PrintStream out = System.out;
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		//Use this method to test your code.
		
//		deepArrayCopy1();
//		stringsAsCharArrays2();
//		stringsAsCharArraysBackwards3();
//		arraySum4();
//		reverseArray5();
//		findAValue6();
//		findAValue7();
//		simpleMethod8();
//		twoMethods9();
//		nestedMethods10();
//		returnValues11();
//		returnValueTypes12();
//		functions13();
//		writeMaxAndMin14();
//		arrayPrintingMethod15();
//		arraySummingMethod16();
//		arrayCopyMethod17();
//		writeArrayReversalMethod18();
//		writeStringReversalMethod19();
//		countLetterOccurrences20();
//		beerOnTheWall21();
//		classifyTriangle22();
//		areaOfARectangle23();
		volumeOfASphere24();
//		binaryNumberString25();
	}
	
	public static void deepArrayCopy1() {
//		a.	Create an array of int
		int[] array = new int[10];
		Integer[] ints = new Integer[array.length];
		
		for(int i = 0; i < array.length; i++){
//			b.	Initialize the array with index values (E.g., [0, 1, 2, 3, 4, 5, ...])
			array[i] = i;
//			c.	Copy the array into an Integer array (not int)
			ints[i]=array[i];
//			d.	Modify the first array
			array[i] *= 2;

//			e/f.	Print out values
			out.println(array[i]);
			out.println(ints[i]);
		}
//		g.	Note that the behavior is different. Explain the difference in a comment (they're basically the same...)
		
	}
	
	public static void stringsAsCharArrays2() throws IOException {
		out.println(in.readLine().charAt(Integer.parseInt(in.readLine())));
	}
	
	public static void stringsAsCharArraysBackwards3() throws IOException {
//		a.	Query a string from the user
		String userIn = in.readLine();
//		b.	Use a char array to print the chars backwards
		for(int i = userIn.length()-1; i >= 0; i--){
			out.println(userIn.charAt(i));
		}	
	}
	
	public static void arraySum4() {
//		a.	Create an array of 100 random ints between 0-100
		int[] ins = new int[100];
		Random rand = new Random();
		int average = 0;
		for(int i = 0; i < ins.length; i++){
			ins[i]=rand.nextInt(101);
			average += ins[i];
		}
//		b.	Calculate the average value of the array (using floating point arithmetic)
		average /= ins.length;
		out.println(average);
	}
	
	public static void reverseArray5() {
//		a.	Create an array of 100 random ints between 0-100
		int[] ins = new int[100];
		Random rand = new Random();
		for(int i = 0; i < ins.length; i++){
			ins[i]=rand.nextInt(101);
//			b.	Print the array
			out.println(ins[i]);
		}
//		c.	Reverse the values so that the value at 0 becomes the value at 99, etc.
		int[] outs = new int[ins.length];
		for(int i = ins.length-1; i >= 0; i--){
			outs[ins.length-i]=ins[i];
//			d.	Print the array
			out.println(outs[i]);
		}
		
	}
	
	public static void findAValue6() {
//		a.	Create an array of 100 random ints between 0-100
		int[] ins = new int[100];
		Random rand = new Random();
		for(int i = 0; i < ins.length; i++){
			ins[i]=rand.nextInt(101);
			if(ins[i] > 90){
				out.println("" + ins[i] + " at: " + i);
				break;
			}
		}
//		b.	Find the first value greater that 90
//		c.	Print the value and its index index
		
	}
	
	public static void findAValue7() {
//		a.	Create an array of 100 random ints between 0-100
		int[] ins = new int[100];
		Random rand = new Random();
		for(int i = ins.length-1; i >= 0; i--){
			ins[i]=rand.nextInt(101);
			if(ins[i] > 90){
				out.println("" + ins[i] + " at: " + i);
				break;
			}
		}
		
//		b.	Find the last value greater than 90
//		c.	Print the value and its index
		
	}
	
	public static void simpleMethod8() {
//		a.	Create a method named simpleMethod8_m1 that prints m1
//		b.	Write the code here to call m1
		simpleMethod8_m1();
	}
	private static void simpleMethod8_m1(){
		out.println("m1");
	}
	
	public static void twoMethods9() {
//		a.	Create methods twoMethods9_m1 and twoMethods9_m2 that print out m1 and m2
//		b.	Write the code here to call m1 followed by m2
		twoMethods9_m1(); twoMethods9_m2();
	}
	private static void twoMethods9_m1(){
		out.println("m1");
	}
	private static void twoMethods9_m2(){
		out.println("m2");
	}
	
	public static void nestedMethods10() {
//		a.	Create methods nestedMethods10_m1, nestedMethods10_ma and nestedMethods10_mb
//		b.	Have method nestedMethods10_m1 call nestedMethods10_ma and nestedMethods10_mb
//		c.	Write the code here to call nestedMethods10_m1
		nestedMethods10_m1();
	}
	private static void nestedMethods10_m1(){
		nestedMethods10_ma(); nestedMethods10_mb();
	}
	private static void nestedMethods10_ma(){
		return;
	}
	private static void nestedMethods10_mb(){
		return;
	}
	
	public static void returnValues11() {
//		a.	Create a method that returns a constant (final) int
//		b.	Call the method
		getFinal();
	}
	private static final int getFinal(){
		return 5;
	}
	
	public static void returnValueTypes12() {
//		a.	Create a method to return an int and another to return a String
//		b.	Call the methods
		getOtherFinal(); getString();
	}
	private static int getOtherFinal(){
		return 5;
	}
	private static String getString(){
		return "Hi";
	}
	
	public static void functions13() {
//		a.	Create methods to add, subtract, mult and divide
//		b.	Call methods with different parameters
		Add(1,2);
		Subtract(3,4);
		Multiply(5,6);
		Divide(7,8);
	}
	private static float Add(float a, float b){
		return (a+b);
	}
	private static float Subtract(float a, float b){
		return (a-b);
	}
	private static float Multiply(float a, float b){
		return (a*b);
	}
	private static float Divide(float a, float b){
		return (a/b);
	}
	
	public static void writeMaxAndMin14() {
//		a.	Fill an array with random numbers
//		b.	Find the largest and smallest value in the array and print them out

		int[] ins = new int[100];
		Random rand = new Random();
		int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
		for(int i = 0; i < ins.length; i++){
			ins[i]=rand.nextInt(101);
			if(ins[i] > max){
				max = ins[i];
			}
			if(ins[i] < min){
				min = ins[i];
			}
		}
		out.println(min);
		out.println(max);
	}
	
	public static void arrayPrintingMethod15() {
//		a.	Create a program with a method to print an array
//		b.	Call the method on two arrays with different sizes filled with random numbers
		PrintArray(randIntsOfSize(50));
		PrintArray(randIntsOfSize(75));
	}
	private static void PrintArray(int[] ins){
		String val = "[" + ins[0];
		for(int i = 1; i < ins.length-1; i++){
			val += "" + ins[i] + ", ";
		}
		val += "" + ins[ins.length-1] + "]";
		out.println(val);
	}
	
	public static void arraySummingMethod16() {
//		a.	Create a method with an array parameter to sum the array
//		b.	Call the method on two arrays with different sizes filled with random numbers
		out.println(SumArray(randIntsOfSize(75)));
		out.println(SumArray(randIntsOfSize(50)));
	}
	private static int SumArray(int[] ins){
		int val = 0;
		for(int i = 1; i < ins.length-1; i++){
			val += ins[i];
		}
		return val;
	}
	
	public static void arrayCopyMethod17() {
//		a.	Create a program with a method to copy one array into another
//		b.	Call the method and print both arrays
		int[] i = randIntsOfSize(75);
		PrintArray(i);
		PrintArray(CopyArray(i));
	}
	private static int[] CopyArray(int[] ins){
		int[] outs = new int[ins.length];
		for(int i = 0; i < ins.length-1; i++){
			outs[i] += ins[i];
		}
		return outs;
	}
	
	public static void writeArrayReversalMethod18() {
//		a.	Create a method with an array parameter to reverse the elements in the array
//		b.	Call the method on two arrays with different sizes filled with random numbers
		ReverseArray(randIntsOfSize(9999));
		ReverseArray(randIntsOfSize(99999));
	}
	private static int[] ReverseArray(int[] ins){
		int[] outs = new int[ins.length];
		for(int i = ins.length-1; i >= 0; i--){
			outs[i] += ins[i];
		}
		return outs;
	}
	
	public static void writeStringReversalMethod19() throws IOException {
//		a.	Create a method with a string parameter that will reverse the string
		String user1 = in.readLine(), user2 = in.readLine();
//		b.	Read two strings, call the method for each
//		c.	Print all four strings
		out.println(user1);
		out.println(reverseString(user1));
		out.println(user2);
		out.println(reverseString(user2));
	}
	private static String reverseString(String input){
		String output = "";
		for(int i = input.length()-1; i >= 0; i--){
			output += input.charAt(i);
		}
		return output;
	}
	
	public static void countLetterOccurrences20() throws IOException {
//		a.	Create a method with a string parameter and a char parameter that counts the number of occurrences of the char in the string and returns the result as an int
//		b.	Read a string and a char, call the method with those parameters
//		c.	Print the results
//		d.	Repeat b & c with a different string and char
		out.println(charCountInString(in.readLine(), in.readLine().charAt(0)));
		out.println(charCountInString(in.readLine(), in.readLine().charAt(0)));
	}
	private static int charCountInString(String input, char checkChar){
		int c = 0;
		for(int i = 0; i < input.length(); i++){
			if(input.charAt(i) == checkChar) c++;
		}
		return c;
	}
	
	public static void beerOnTheWall21() {
//		a.  Write the code to to print ALL the lyrics to “99 bottles of beer (or pop)”
		for(int i = 99; i > 0; i--){
			out.println("" + i + " Bottles of beer on the wall,");
			out.println("" + i + " Bottles of beer!");
			out.println("Take one down, pass it around;");
			out.println("Now there's " + (i-1) + " bottles of beer on the wall!");
			out.println("");
		}
	}
	
	public static enum triangle{
		Equilateral, Isosceles, Scalene
	}
	public static void classifyTriangle22() throws NumberFormatException, IOException {
//		a.	Write a method to classify a triangle.
//		b.  The method receives three parameters representing the three sides of a triangle.  The method returns an enum: Equilateral, Isosceles, Scalene
		out.println("3 numbers please");
		int a = Integer.parseInt(in.readLine()),b = Integer.parseInt(in.readLine()),c = Integer.parseInt(in.readLine());
		out.println("A triangle with sides " + a + "-" + b + "-" + c + " is " + evaluateSides(a,b,c));
	}
	private static triangle evaluateSides(int a, int b, int c){
		if(a==b || b==c || a==c){
			if(a==b && b==c){
				return triangle.Equilateral;
			}else{
				return triangle.Isosceles;
			}
		}else{
			return triangle.Scalene;
		}
	}
	
	public static void areaOfARectangle23() throws NumberFormatException, IOException {
//		a.	Create a method that calculates the area of a rectangle and returns it (floating point arithmetic)
//		b.	Read a length and a width from the user, call the method with those as parameters, print out the result
		float a = Float.parseFloat(in.readLine()),b = Float.parseFloat(in.readLine());
		out.println(rectArea(a,b));
	}
	private static float rectArea(float w, float h){
		return w*h;
	}
	
	public static void volumeOfASphere24() throws NumberFormatException, IOException {
//		a.	Create a method that calculates the volume of a sphere given the radius
//		b.	Read a radius from the user, call the method with the radius
//		c.	Print the returned value
		float a = Float.parseFloat(in.readLine());
		out.println(sphereVolume(a));
	}
	private static float sphereVolume(float radius){
		return (float) ((4/3)*Math.PI*Math.pow(radius,3));
	}
	
	public static void binaryNumberString25() throws NumberFormatException, IOException {
//		a.	Read a int greater than 100 from the user
//		b.	Convert the int to the equivalent string of binary digits and print it out
//		i.	For example given the number 128, print the string “10000000”
		int x = Integer.parseInt(in.readLine());
		out.println(Integer.toBinaryString(x));
	}

	private static int[] randIntsOfSize(int size){
		int[] ins = new int[size];
		Random rand = new Random();
		for(int i = 0; i < ins.length; i++){
			ins[i]=rand.nextInt(101);
		}
		return ins;
	}
}
